## an analysis of brainfucks patterns ##


.symbols {
	tape 	-> 	a list of brainfuck symbols to be executed
	ip 	-> 	the instruction pointer for the tape 

	.explaination {
		-1_th order		->	the set of all brainfuck symbols decomposed of their zig <psudocode> counterparts.
		0_th order		-> 	all possible condenced notations of the -1_th order set.
								-addendum: 
		1_st order			-> all permutations of the 0_th order into an abstract set of   
			-if no other [] groups are found within
			-&the sum of .slide Insts == 0
			-&if the amount added to cur_cell is co-prime with the value in cur_cell
				then it succeeds the check
	}
}



-1_th order simplifications
>		simplifies to 		->  ip += 1
<		simplifies to 		->  ip -= 1 {
	tape[cell_pointer] => cur_cell
}

+		simplifies to 		->  cur_cell += 1
-		simplifies to 		->  cur_cell -= 1
[		simplifies to 		->  ip = if(cur_cell == 0) &adress else ip + 1
]		simplifies to 		->  reverse statement of ^^

.		simplifies to_<in default bf> 		->  print <cur_cell> as char
,		simplifies to_<in default bf>		->  take input and write to <cur_cell> {



	>>>>> simplifies to 		->  .slide .x_5 {
	>>>><<v simplifies 	to			->  .slide .x_4 .y_-1
	>^<v simplifies to 				->  nao

		.slide subset {
			[>] &[<]				=> find 0 left or right
			[>>>..] reduces to					-> find zero in increments of n
			[<<^^^..] reduces to				-> find zero in increments of nÂ²

			[->], [-<], [+>], [+<] 		=> 	increment // decrement cur_cell, _s1, _s2.. until <0> is found			//s stands for sign, + or -
			[>-], [>+], [<-], [<+]				=>	increment // decrement _s1, _s2.. until <0> is found, ignoring cur_cell
		}
	}

	
	+++ simplifies to			->  .add_3
	-- simplifies to			->  .add_254 {
		+++-+++++- simplifies to		->  .add_6

		.set subset of add {
			[-] &[+] 		simplifies to 		->  0
			[-><], [+<>], [+><], [-<>], [->>><<<]		reduce to		->  0

			// the 4 simple "reducables" of order 1						<.slide reversable with same effect just -1 instead of +1>
			[->+<]		->	set cur_cell 0, 			add_<what was> to cell_+1
			[+>+<]		->	set 0, 						add_<the inverse of what was> to _+1		<-add>
			[->-<]		->	0,				sub to _+!
			[+>-<]		->	0,				-sub _+1
		}
	}

}
you itterate through a slice of Inst
for every .slide you add its value to a sum
at every point you see a .ADD and sum == 0, add that Inst<'s value> to a seperate list <of u8*>

when sum == 0 and the <slice of Insts> is empty, it passed the first check.
1*when all the seperate .add, added up are co-prime with value at cur_cell. it passes the second check. // no need for a 2nd list, just make another accumulator.
if no [], <other iterfearing Insts> pairs are found during iterating, it passes the final check and can be processed.

//1: we do this, because this program would fail the checksum => "[->+<+<+>]" but if we dont do this "[->+<+<+>+]" would fail despite being co-prime with any N in cur_cell.

[->+]
[-], [+]
[>-<+] 		would all pass otherwise.
@mod(n, i) == 0??

co-prime check condences to: @ctz(&cur_cell) >= @ctz(n_inc)?
